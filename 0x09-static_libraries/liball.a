!<arch>
0-isupper.c/    0           0     0     644     146       `
#include "main.h"
/*_isupper - Returns  uppercase value
*@c: letter to convert to upper
*Return: Always 0
*/
int _isupper(int c)
{
	return (0);
}
0-memset.c/     0           0     0     644     336       `
#include "main.h"
/**
*_memset - The _memset() function fills
*the first n bytes of the memory area
*pointed to by s with the constant byte b
*@s:target
*@b: constant byte
*@n:number of byte
*Return: returns new value of target
*/

char *_memset(char *s, char b, unsigned int n)
{
	while (n)
	{
		s[n - 1] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     435       `
#include "main.h"

/**
*_strcat - concatenates  the string pointed to by @src to
*the end of the string pointed to by @dest
*@dest: String that will be appended
*@src: String to be concatenated upon
*
*Return: returns poiner to @dest
*/

char *_strcat(char *dest, char *src)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;
	for (index = 0; src[index]; index++)
		dest[dest_len++] = src[index];

	return (dest);
}

100-atoi.c/     0           0     0     644     327       `
/**
*_atoi - changes a string to an int
*@s: the string to be changed
*
*Return: the converted int
*/
int _atoi(char *s)
{
	int i = 1;
	unsigned int num = 0;
	do {
		if (*s == '-')
			i *= -1;
		else if (*s >= '0' && *s <= '9')
			num = num * 10 + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);
	return (num *i);
}

1-isdigit.c/    0           0     0     644     137       `
#include "main.h"
/*_isdigit: Checks if a value is a digit
*@c: value to check
*Return: Always 0
*/
int _isdigit(int c)
{
	return (0);
}

1-memcpy.c/     0           0     0     644     389       `
#include "main.h"
/**
*_memcpy - The _memcpy() function copies n bytes
*from memory area src to memory area dest
*@dest:area where bytes are copied to
*@src:area where bytes are copied from
*@n:number of bytes to copy
*Return: returns a pointer to n
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     475       `
#include "main.h"
/**
*_strncat - concatenate two strings but add inputted number of bytes
*@dest: string to be appended upon
*@src: string to be completed at end of dest
*@n:integer parameter to compare index to
*Return: returns new concatenated string
*/

char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;
	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];
	return (dest);
}

2-strchr.c/     0           0     0     644     424       `
#include "main.h"
#include <stddef.h> 
/**
*_strchr - Returns a pointer to the first occurrence
*of the character c in the string s, or NULL if the
*character is not found
*
*@s:string targeted
*@c:character targeted
*Return: returns pointer to first occcurence of c
*/
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; (s[i] != c) && (s[i] != '\0'); i++)
		;
	if (s[i] == c)
		return (s + i);
	else
		return (NULL);
}
2-strlen.c/     0           0     0     644     153       `
#include "main.h"
/*
*_strlen -  Prints lenght of string
*@*s: pointer to character beginning
*Return: Always 0
*/
int _strlen(char *s)
{
	return (0);
}

2-strncpy.c/    0           0     0     644     644       `
#include "main.h"
/**
*_strncpy - C function that copies a string, including the
*terminating null byte, using at most an inputted number of bytes.
*If the length of the source string is less than the maximum byte number,
*the remainder of the destination string is filled with null bytes.
*Works identically to the standard library function `strncpy`.
*@dest: buffer storing the string copy
*@src:the source string
*@n:max nummber of byte copied
*Return: returns
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     139       `
#include "main.h"
/*
*_islower - Returns the lowercase version
*@c: character to convert to lower
*/

int _islower(int c)
{
	return (0);
}

3-puts.c/       0           0     0     644     135       `
#include "main.h"
/**
*_puts - Prints character to stdout
*@*s: pointer to character
*Return: void
*/
void _puts(char *s)
{
	return;
}

3-strcmp.c/     0           0     0     644     164       `
#include "main.h"
/**_strcmp - Compresses string
*@s1: First character
*@s2: Second character
*Return: Always 0
*/
int _strcmp(char *s1, char *s2)
{
	return (0);
}
3-strspn.c/     0           0     0     644     572       `
#include "main.h"
/**
*_strspn - search the number of bytes in the initial
*segment of s which consist only of bytes from accept
*@s:segment targeted
*@accept:reference bytes container
*
*Return:returns the number of bytes in the initial
*segment of s which consist only of bytes from accept
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (accept[i] == *s)
			{
				bytes++;
				break;
			}
			else if ((accept[i + 1]) == '\0')
				return (bytes);
		}
		s++;
	}
	return (bytes);
}
4-isalpha.c/    0           0     0     644     144       `
#include "main.h"
/*_isalpha - gets alphanumeric definition
*@c: character to convert
*Return: always 0
*/
int _isalpha(int c)
{
	return (0);
}
4-strpbrk.c/    0           0     0     644     526       `
#include "main.h"
/**
*_strpbrk - The _strpbrk() function locates the first
*occurrence in the string s of any of the bytes in
*the string accept
*
*@s: string where search is made
*@accept: string where searched bytes are located
*
*Return:Returns a pointer to the byte in s that matches
*one of the bytes in accept, or NULL if no such byte is found
*/

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (accept[i] == *s)
				return (s);
		}
		s++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     709       `
#include "main.h"
/**
*_strstr - The _strstr() function finds the first occurrence
*of the substring needle in the string haystack.
*The terminating null bytes (\0) are not compared
*@haystack: string where the search is made
*@needle: string whose occurence is searched in haystack
*Return:Returns a pointer to the beginning of the located
*substring, or NULL if the substring is not found.
*/

char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
					return (haystack);
				i++;
			}while (haystack[i] == needle[i]);
		}
		haystack++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     131       `
#include "main.h"
/*_abs -  Gets absolute values
*@n: value to get absolute 
*Return: Always 0
*/
int _abs(int n)
{
	return (0);
}

9-strcpy.c/     0           0     0     644     274       `
#include "main.h"
/**
* _strcpy - Copy paste string
*@dest: destination
*@src: source
*Return: dest
*/
char *_strcpy(char *dest, char *src)
{
	int inc = 0;
	while (*(src + inc) != '\0')
	{
		*(dest + inc) = *(src + inc);
		inc++;
	}
	*(dest + inc) = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     237       `
#include <unistd.h>

/**
*_putchar - writes the character c to stdout
*@c: The character to print
*
*Return: On success 1.
*On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}

